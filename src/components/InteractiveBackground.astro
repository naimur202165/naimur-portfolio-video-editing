---
---

<div class="interactive-background">
  <canvas class="particle-canvas"></canvas>
  <div class="gradient-overlay"></div>
  <div class="blend-edges"></div>
</div>

<style>
  .interactive-background {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    overflow: hidden;
    z-index: 0;
  }

  .particle-canvas {
    position: absolute;
    width: 100%;
    height: 100%;
    opacity: 0.8;
  }

  .gradient-overlay {
    position: absolute;
    width: 100%;
    height: 100%;
    background: radial-gradient(
      circle at var(--mouse-x, 50%) var(--mouse-y, 50%),
      var(--accent-light) 0%,
      var(--accent-regular) 25%,
      var(--accent-dark) 50%,
      transparent 70%
    );
    opacity: 0.15;
    mix-blend-mode: multiply;
    pointer-events: none;
  }

  :root.theme-dark .gradient-overlay {
    mix-blend-mode: screen;
    opacity: 0.2;
  }

  .blend-edges {
    position: absolute;
    inset: 0;
    background: radial-gradient(
      circle at center,
      transparent 30%,
      var(--gray-999) 100%
    );
    opacity: 0.6;
    pointer-events: none;
  }

  :root.theme-dark .blend-edges {
    opacity: 0.5;
  }
</style>

<script>
  import { ParticleField } from '../utils/particleField';

  function initBackground() {
    const canvas = document.querySelector('.particle-canvas') as HTMLCanvasElement;
    if (!canvas) return;

    const particleField = new ParticleField(canvas);

    // Handle gradient overlay
    const background = canvas.closest('.interactive-background');
    if (background) {
      let lastUpdate = 0;
      const throttleDelay = 1000 / 60;

      const updateGradient = (e: MouseEvent) => {
        const now = Date.now();
        if (now - lastUpdate > throttleDelay) {
          const rect = background.getBoundingClientRect();
          const x = ((e.clientX - rect.left) / rect.width) * 100;
          const y = ((e.clientY - rect.top) / rect.height) * 100;
          background.style.setProperty('--mouse-x', `${x}%`);
          background.style.setProperty('--mouse-y', `${y}%`);
          lastUpdate = now;
        }
      };

      // Add mousemove event to the entire hero section
      const heroSection = document.querySelector('.hero');
      if (heroSection) {
        heroSection.addEventListener('mousemove', updateGradient);
      }
    }

    return () => particleField.destroy();
  }

  // Initialize on page load and after Astro view transitions
  document.addEventListener('astro:page-load', initBackground);
  
  // Initialize on first load
  if (document.readyState === 'complete') {
    initBackground();
  } else {
    document.addEventListener('DOMContentLoaded', initBackground);
  }
</script>